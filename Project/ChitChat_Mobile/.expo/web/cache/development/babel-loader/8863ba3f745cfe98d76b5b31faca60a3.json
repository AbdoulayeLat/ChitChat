{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState, useEffect, useLayoutEffect } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport PermissionsAndroid from \"react-native-web/dist/exports/PermissionsAndroid\";\nimport MaterialCommunityIcons from \"@expo/vector-icons/MaterialCommunityIcons\";\nimport Contacts from 'react-native-contacts';\nimport { useIsFocused } from '@react-navigation/native';\nimport ContactCard from \"../components/ContactCard\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function MyContacts(_ref) {\n  var navigation = _ref.navigation;\n  var isFocused = useIsFocused();\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      myContacts = _useState2[0],\n      setMyContacts = _useState2[1];\n\n  useLayoutEffect(function () {\n    navigation.setOptions({\n      title: 'Contacts',\n      headerStyle: {\n        backgroundColor: '#1f9'\n      },\n      headerTitleStyle: {\n        color: '#050a9c'\n      },\n      headTintColor: 'black'\n    });\n  }, [navigation]);\n  useEffect(function () {\n    getAllContacts();\n  }, [isFocused]);\n\n  function getAllContacts() {\n    var contacts;\n    return _regeneratorRuntime.async(function getAllContacts$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(Contacts.getAll());\n\n          case 3:\n            contacts = _context.sent;\n            console.log(contacts);\n            setMyContacts(contacts);\n            _context.next = 11;\n            break;\n\n          case 8:\n            _context.prev = 8;\n            _context.t0 = _context[\"catch\"](0);\n            console.log(_context.t0);\n\n          case 11:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 8]], Promise);\n  }\n\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(MaterialCommunityIcons, {\n      name: \"account-plus\",\n      size: 40,\n      color: \"#050a9c\",\n      style: styles.addIcon,\n      onPress: function onPress() {\n        return navigation.navigate('AddContact');\n      }\n    }), _jsx(FlatList, {\n      data: myContacts,\n      keyExtractor: function keyExtractor(item) {\n        return item.recordID;\n      },\n      renderItem: function renderItem(_ref2) {\n        var item = _ref2.item;\n        return _jsx(TouchableOpacity, {\n          onPress: function onPress() {\n            return navigation.navigate('Profile', {\n              contactInfo: {\n                id: item.recordID\n              }\n            });\n          },\n          children: _jsx(ContactCard, {\n            contactInfo: item\n          })\n        });\n      }\n    })]\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: 'white'\n  },\n  addIcon: {\n    bottom: 20,\n    right: 20,\n    position: 'absolute',\n    zIndex: 1\n  }\n});","map":{"version":3,"sources":["/Users/cheikh/Desktop/ChitChat1/Project/ChitChat_Mobile/screens/MyContacts.js"],"names":["React","useState","useEffect","useLayoutEffect","MaterialCommunityIcons","Contacts","useIsFocused","ContactCard","MyContacts","navigation","isFocused","myContacts","setMyContacts","setOptions","title","headerStyle","backgroundColor","headerTitleStyle","color","headTintColor","getAllContacts","getAll","contacts","console","log","styles","container","addIcon","navigate","item","recordID","contactInfo","id","StyleSheet","create","flex","bottom","right","position","zIndex"],"mappings":";;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,EAAoCC,eAApC,QAA0D,OAA1D;;;;;;;AAUA,OAAOC,sBAAP;AACA,OAAOC,QAAP,MAAqB,uBAArB;AACA,SAAQC,YAAR,QAA2B,0BAA3B;AACA,OAAOC,WAAP;;;AAEA,eAAe,SAASC,UAAT,OAAkC;AAAA,MAAbC,UAAa,QAAbA,UAAa;AAC/C,MAAMC,SAAS,GAAGJ,YAAY,EAA9B;;AAEA,kBAAoCL,QAAQ,CAAC,EAAD,CAA5C;AAAA;AAAA,MAAOU,UAAP;AAAA,MAAmBC,aAAnB;;AACAT,EAAAA,eAAe,CAAC,YAAM;AACpBM,IAAAA,UAAU,CAACI,UAAX,CAAsB;AACpBC,MAAAA,KAAK,EAAE,UADa;AAGpBC,MAAAA,WAAW,EAAE;AAACC,QAAAA,eAAe,EAAE;AAAlB,OAHO;AAIpBC,MAAAA,gBAAgB,EAAE;AAACC,QAAAA,KAAK,EAAE;AAAR,OAJE;AAKpBC,MAAAA,aAAa,EAAE;AALK,KAAtB;AAOD,GARc,EAQZ,CAACV,UAAD,CARY,CAAf;AASAP,EAAAA,SAAS,CAAC,YAAM;AACdkB,IAAAA,cAAc;AACf,GAFQ,EAEN,CAACV,SAAD,CAFM,CAAT;;AAIA,WAAeU,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CAE2Bf,QAAQ,CAACgB,MAAT,EAF3B;;AAAA;AAEUC,YAAAA,QAFV;AAGIC,YAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;AACAV,YAAAA,aAAa,CAACU,QAAD,CAAb;AAJJ;AAAA;;AAAA;AAAA;AAAA;AAMIC,YAAAA,OAAO,CAACC,GAAR;;AANJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAUA,SACE,MAAC,IAAD;AAAM,IAAA,KAAK,EAAEC,MAAM,CAACC,SAApB;AAAA,eACE,KAAC,sBAAD;AACE,MAAA,IAAI,EAAC,cADP;AAEE,MAAA,IAAI,EAAE,EAFR;AAGE,MAAA,KAAK,EAAC,SAHR;AAIE,MAAA,KAAK,EAAED,MAAM,CAACE,OAJhB;AAKE,MAAA,OAAO,EAAE;AAAA,eAAMlB,UAAU,CAACmB,QAAX,CAAoB,YAApB,CAAN;AAAA;AALX,MADF,EAQE,KAAC,QAAD;AACE,MAAA,IAAI,EAAEjB,UADR;AAEE,MAAA,YAAY,EAAE,sBAAAkB,IAAI;AAAA,eAAIA,IAAI,CAACC,QAAT;AAAA,OAFpB;AAGE,MAAA,UAAU,EAAE;AAAA,YAAED,IAAF,SAAEA,IAAF;AAAA,eACV,KAAC,gBAAD;AACE,UAAA,OAAO,EAAE;AAAA,mBACPpB,UAAU,CAACmB,QAAX,CAAoB,SAApB,EAA+B;AAC7BG,cAAAA,WAAW,EAAE;AAACC,gBAAAA,EAAE,EAAEH,IAAI,CAACC;AAAV;AADgB,aAA/B,CADO;AAAA,WADX;AAAA,oBAME,KAAC,WAAD;AAAa,YAAA,WAAW,EAAED;AAA1B;AANF,UADU;AAAA;AAHd,MARF;AAAA,IADF;AAyBD;AAED,IAAMJ,MAAM,GAAGQ,UAAU,CAACC,MAAX,CAAkB;AAC/BR,EAAAA,SAAS,EAAE;AACTS,IAAAA,IAAI,EAAE,CADG;AAETnB,IAAAA,eAAe,EAAE;AAFR,GADoB;AAK/BW,EAAAA,OAAO,EAAE;AACPS,IAAAA,MAAM,EAAE,EADD;AAEPC,IAAAA,KAAK,EAAE,EAFA;AAGPC,IAAAA,QAAQ,EAAE,UAHH;AAIPC,IAAAA,MAAM,EAAE;AAJD;AALsB,CAAlB,CAAf","sourcesContent":["import React, {useState, useEffect, useLayoutEffect} from 'react';\nimport {\n  View,\n  Text,\n  FlatList,\n  StyleSheet,\n  TouchableOpacity,\n  PermissionsAndroid,\n} from 'react-native';\n\nimport MaterialCommunityIcons from 'react-native-vector-icons/MaterialCommunityIcons';\nimport Contacts from 'react-native-contacts';\nimport {useIsFocused} from '@react-navigation/native';\nimport ContactCard from '../components/ContactCard';\n\nexport default function MyContacts({navigation}) {\n  const isFocused = useIsFocused();\n\n  const [myContacts, setMyContacts] = useState([]);\n  useLayoutEffect(() => {\n    navigation.setOptions({\n      title: 'Contacts',\n\n      headerStyle: {backgroundColor: '#1f9'},\n      headerTitleStyle: {color: '#050a9c'},\n      headTintColor: 'black',\n    });\n  }, [navigation]);\n  useEffect(() => {\n    getAllContacts();\n  }, [isFocused]);\n\n  async function getAllContacts() {\n    try {\n      const contacts = await Contacts.getAll();\n      console.log(contacts);\n      setMyContacts(contacts);\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  return (\n    <View style={styles.container}>\n      <MaterialCommunityIcons\n        name=\"account-plus\"\n        size={40}\n        color=\"#050a9c\"\n        style={styles.addIcon}\n        onPress={() => navigation.navigate('AddContact')}\n      />\n      <FlatList\n        data={myContacts}\n        keyExtractor={item => item.recordID}\n        renderItem={({item}) => (\n          <TouchableOpacity\n            onPress={() =>\n              navigation.navigate('Profile', {\n                contactInfo: {id: item.recordID},\n              })\n            }>\n            <ContactCard contactInfo={item} />\n          </TouchableOpacity>\n        )}\n      />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: 'white',\n  },\n  addIcon: {\n    bottom: 20,\n    right: 20,\n    position: 'absolute',\n    zIndex: 1,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}