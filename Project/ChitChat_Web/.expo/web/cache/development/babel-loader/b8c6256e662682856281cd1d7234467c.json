{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport View from \"react-native-web/dist/exports/View\";\nimport KeyboardAvoidingView from \"react-native-web/dist/exports/KeyboardAvoidingView\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport Pressable from \"react-native-web/dist/exports/Pressable\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport React, { useState } from 'react';\nimport Colors from \"../utils/Colors.js\";\nimport { auth, firestore } from \"../firebase.js\";\nimport { getApp } from 'firebase/app';\nimport { FirebaseRecaptchaVerifierModal, FirebaseRecaptchaBanner } from 'expo-firebase-recaptcha';\nimport { getAuth, PhoneAuthProvider, signInWithCredential } from 'firebase/auth';\nimport { async } from '@firebase/util';\nimport { collection, query, where, getDocs, doc, runTransaction } from \"firebase/firestore\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar app = getApp();\n\nvar HomeScreen = function HomeScreen(_ref) {\n  var navigation, recaptchaVerifier, _React$useState, _React$useState2, confirmationResult, setConfirmationResult, firebaseConfig, attemptInvisibleVerification, _React$useState3, _React$useState4, verificationId, setVerificationId, _React$useState5, _React$useState6, phoneNumber, addPhoneNumber, _React$useState7, _React$useState8, otp, setOTP, _useState, _useState2, modalVisible, setModalVisible, _React$useState9, _React$useState10, logState, setLogState, GetOTP, checkOTP;\n\n  return _regeneratorRuntime.async(function HomeScreen$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          navigation = _ref.navigation;\n          recaptchaVerifier = React.useRef(null);\n          _React$useState = React.useState(), _React$useState2 = _slicedToArray(_React$useState, 2), confirmationResult = _React$useState2[0], setConfirmationResult = _React$useState2[1];\n          firebaseConfig = app ? app.options : undefined;\n          attemptInvisibleVerification = false;\n          _React$useState3 = React.useState(), _React$useState4 = _slicedToArray(_React$useState3, 2), verificationId = _React$useState4[0], setVerificationId = _React$useState4[1];\n          _React$useState5 = React.useState('+1'), _React$useState6 = _slicedToArray(_React$useState5, 2), phoneNumber = _React$useState6[0], addPhoneNumber = _React$useState6[1];\n          _React$useState7 = React.useState(''), _React$useState8 = _slicedToArray(_React$useState7, 2), otp = _React$useState8[0], setOTP = _React$useState8[1];\n          _useState = useState(false), _useState2 = _slicedToArray(_useState, 2), modalVisible = _useState2[0], setModalVisible = _useState2[1];\n          _React$useState9 = React.useState(false), _React$useState10 = _slicedToArray(_React$useState9, 2), logState = _React$useState10[0], setLogState = _React$useState10[1];\n          _context4.next = 12;\n          return _regeneratorRuntime.awrap(auth.onAuthStateChanged(function (user) {\n            if (user) {\n              setLogState(true);\n            }\n          }));\n\n        case 12:\n          if (logState === true) {\n            navigation.replace('Main', {\n              paramKey: phoneNumber,\n              paramToken: token\n            });\n          }\n\n          GetOTP = function GetOTP() {\n            var phoneProvider, _verificationId;\n\n            return _regeneratorRuntime.async(function GetOTP$(_context) {\n              while (1) {\n                switch (_context.prev = _context.next) {\n                  case 0:\n                    if (!(phoneNumber && phoneNumber.length > 9)) {\n                      _context.next = 15;\n                      break;\n                    }\n\n                    _context.prev = 1;\n                    phoneProvider = new PhoneAuthProvider(auth);\n                    _context.next = 5;\n                    return _regeneratorRuntime.awrap(phoneProvider.verifyPhoneNumber(phoneNumber, recaptchaVerifier.current));\n\n                  case 5:\n                    _verificationId = _context.sent;\n                    setVerificationId(_verificationId);\n                    setModalVisible(true);\n                    _context.next = 13;\n                    break;\n\n                  case 10:\n                    _context.prev = 10;\n                    _context.t0 = _context[\"catch\"](1);\n                    alert(_context.t0.message);\n\n                  case 13:\n                    _context.next = 16;\n                    break;\n\n                  case 15:\n                    alert(\"Please enter a 10 digit number\");\n\n                  case 16:\n                  case \"end\":\n                    return _context.stop();\n                }\n              }\n            }, null, null, [[1, 10]], Promise);\n          };\n\n          checkOTP = function checkOTP() {\n            var credential, _token, userRef, readUser;\n\n            return _regeneratorRuntime.async(function checkOTP$(_context3) {\n              while (1) {\n                switch (_context3.prev = _context3.next) {\n                  case 0:\n                    _context3.prev = 0;\n                    credential = PhoneAuthProvider.credential(verificationId, otp);\n                    _context3.next = 4;\n                    return _regeneratorRuntime.awrap(signInWithCredential(auth, credential));\n\n                  case 4:\n                    setModalVisible(false);\n                    _token = auth.currentUser.uid;\n                    userRef = doc(firestore, \"users\", phoneNumber);\n                    _context3.next = 9;\n                    return _regeneratorRuntime.awrap(runTransaction(firestore, function _callee(transaction) {\n                      var user;\n                      return _regeneratorRuntime.async(function _callee$(_context2) {\n                        while (1) {\n                          switch (_context2.prev = _context2.next) {\n                            case 0:\n                              _context2.next = 2;\n                              return _regeneratorRuntime.awrap(transaction.get(userRef));\n\n                            case 2:\n                              user = _context2.sent;\n\n                              if (!user.exists()) {\n                                navigation.navigate('Registration', {\n                                  paramKey: phoneNumber,\n                                  paramToken: _token\n                                });\n                              } else {\n                                navigation.replace('Main', {\n                                  paramKey: phoneNumber,\n                                  paramToken: _token\n                                });\n                              }\n\n                            case 4:\n                            case \"end\":\n                              return _context2.stop();\n                          }\n                        }\n                      }, null, null, null, Promise);\n                    }));\n\n                  case 9:\n                    readUser = _context3.sent;\n                    _context3.next = 16;\n                    break;\n\n                  case 12:\n                    _context3.prev = 12;\n                    _context3.t0 = _context3[\"catch\"](0);\n                    setModalVisible(false);\n                    console.log(_context3.t0.message);\n\n                  case 16:\n                  case \"end\":\n                    return _context3.stop();\n                }\n              }\n            }, null, null, [[0, 12]], Promise);\n          };\n\n          return _context4.abrupt(\"return\", _jsx(View, {\n            style: styles.homeScreen,\n            children: _jsxs(View, {\n              style: styles.loginView,\n              children: [_jsx(Image, {\n                source: require(\"../assets/img/Logo.png\"),\n                style: {\n                  width: 200,\n                  height: 200,\n                  marginTop: 20,\n                  borderRadius: 40\n                }\n              }), _jsx(Text, {\n                style: styles.loginText,\n                children: \"WELCOME\\uD83D\\uDC4B\\uD83C\\uDFFD\"\n              }), _jsx(Text, {\n                style: styles.textInfo,\n                children: \"Enter Your Phone Number:\"\n              }), _jsx(TextInput, {\n                style: styles.textInput,\n                placeholder: '+11234567899',\n                onChangeText: function onChangeText(text) {\n                  return addPhoneNumber(text.replace(/ /g, ''));\n                }\n              }), _jsx(Text, {\n                style: {\n                  color: 'grey',\n                  fontSize: 15\n                },\n                children: \"*You will receive a code on your phone number\"\n              }), _jsx(Pressable, {\n                style: styles.btnOTP,\n                onPress: function onPress() {\n                  return GetOTP();\n                },\n                children: _jsx(Text, {\n                  style: {\n                    color: Colors.Secondary,\n                    fontWeight: '700',\n                    fontSize: 20,\n                    padding: 10\n                  },\n                  children: \"Get OTP\"\n                })\n              }), _jsx(FirebaseRecaptchaVerifierModal, {\n                ref: recaptchaVerifier,\n                firebaseConfig: app.options,\n                attemptInvisibleVerification: true,\n                androidHardwareAccelerationDisabled: true\n              }), _jsx(TextInput, {\n                style: styles.textInput,\n                placeholder: 'Enter your One-Time-Password',\n                onChangeText: function onChangeText(text) {\n                  return setOTP(text);\n                }\n              }), _jsx(Pressable, {\n                style: styles.btnLogin,\n                onPress: function onPress() {\n                  return checkOTP();\n                },\n                children: _jsx(Text, {\n                  style: {\n                    color: Colors.Secondary,\n                    fontWeight: '700',\n                    fontSize: 20,\n                    padding: 10\n                  },\n                  children: \"LOGIN\"\n                })\n              })]\n            })\n          }));\n\n        case 16:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nvar styles = StyleSheet.create({\n  homeScreen: {\n    backgroundColor: Colors.Primary,\n    flex: 1,\n    alignItems: 'center'\n  },\n  loginView: {\n    backgroundColor: Colors.Secondary,\n    height: '80%',\n    width: '35%',\n    borderRadius: 40,\n    alignItems: 'center',\n    marginTop: '3%'\n  },\n  loginText: {\n    color: Colors.Primary,\n    fontSize: 40,\n    fontWeight: 'bold',\n    marginTop: 20\n  },\n  textInput: {\n    marginTop: 5,\n    marginBottom: 5,\n    borderWidth: 2,\n    borderRadius: 10,\n    borderColor: Colors.Primary,\n    fontSize: 20,\n    height: 40,\n    width: 300,\n    textAlign: 'center'\n  },\n  textInfo: {\n    color: Colors.Primary,\n    fontSize: 20,\n    marginTop: 18,\n    fontWeight: 'bold'\n  },\n  btnOTP: {\n    backgroundColor: Colors.Primary,\n    borderRadius: 10,\n    marginTop: 10,\n    marginBottom: 5\n  },\n  btnLogin: {\n    backgroundColor: Colors.Primary,\n    borderRadius: 10,\n    marginTop: 5\n  }\n});\nexport default HomeScreen;","map":{"version":3,"sources":["/Users/abdoulayendiaye/Documents/chitchat/screens/HomeScreen.js"],"names":["React","useState","Colors","auth","firestore","getApp","FirebaseRecaptchaVerifierModal","FirebaseRecaptchaBanner","getAuth","PhoneAuthProvider","signInWithCredential","async","collection","query","where","getDocs","doc","runTransaction","app","HomeScreen","navigation","recaptchaVerifier","useRef","confirmationResult","setConfirmationResult","firebaseConfig","options","undefined","attemptInvisibleVerification","verificationId","setVerificationId","phoneNumber","addPhoneNumber","otp","setOTP","modalVisible","setModalVisible","logState","setLogState","onAuthStateChanged","user","replace","paramKey","paramToken","token","GetOTP","length","phoneProvider","verifyPhoneNumber","current","alert","message","checkOTP","credential","currentUser","uid","userRef","transaction","get","exists","navigate","readUser","console","log","styles","homeScreen","loginView","require","width","height","marginTop","borderRadius","loginText","textInfo","textInput","text","color","fontSize","btnOTP","Secondary","fontWeight","padding","btnLogin","StyleSheet","create","backgroundColor","Primary","flex","alignItems","marginBottom","borderWidth","borderColor","textAlign"],"mappings":";;;;;;;;;;;;AACA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AACA,OAAOC,MAAP;AACA,SAASC,IAAT,EAAeC,SAAf;AACA,SAASC,MAAT,QAAuB,cAAvB;AACA,SAASC,8BAAT,EAAyCC,uBAAzC,QAAwE,yBAAxE;AACA,SAASC,OAAT,EAAkBC,iBAAlB,EAAqCC,oBAArC,QAAiE,eAAjE;AACA,SAASC,KAAT,QAAsB,gBAAtB;AACA,SAASC,UAAT,EAAqBC,KAArB,EAA4BC,KAA5B,EAAmCC,OAAnC,EAA4CC,GAA5C,EAAiDC,cAAjD,QAAuE,oBAAvE;;;AAEA,IAAMC,GAAG,GAAGb,MAAM,EAAlB;;AACA,IAAMc,UAAU,GAAG,SAAbA,UAAa;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAQC,UAAAA,UAAR,QAAQA,UAAR;AACXC,UAAAA,iBADW,GACSrB,KAAK,CAACsB,MAAN,CAAa,IAAb,CADT;AAAA,4BAEmCtB,KAAK,CAACC,QAAN,EAFnC,yDAEVsB,kBAFU,wBAEUC,qBAFV;AAGXC,UAAAA,cAHW,GAGMP,GAAG,GAAGA,GAAG,CAACQ,OAAP,GAAiBC,SAH1B;AAIXC,UAAAA,4BAJW,GAIoB,KAJpB;AAAA,6BAK2B5B,KAAK,CAACC,QAAN,EAL3B,0DAKV4B,cALU,wBAKMC,iBALN;AAAA,6BAOqB9B,KAAK,CAACC,QAAN,CAAe,IAAf,CAPrB,0DAOV8B,WAPU,wBAOGC,cAPH;AAAA,6BAQKhC,KAAK,CAACC,QAAN,CAAe,EAAf,CARL,0DAQVgC,GARU,wBAQLC,MARK;AAAA,sBASuBjC,QAAQ,CAAC,KAAD,CAT/B,6CASVkC,YATU,kBASIC,eATJ;AAAA,6BAUepC,KAAK,CAACC,QAAN,CAAe,KAAf,CAVf,2DAUVoC,QAVU,yBAUAC,WAVA;AAAA;AAAA,2CAYXnC,IAAI,CAACoC,kBAAL,CAAwB,UAASC,IAAT,EAAe;AAC3C,gBAAIA,IAAJ,EAAS;AACPF,cAAAA,WAAW,CAAC,IAAD,CAAX;AACD;AACF,WAJK,CAZW;;AAAA;AAkBjB,cAAID,QAAQ,KAAK,IAAjB,EAAsB;AACpBjB,YAAAA,UAAU,CAACqB,OAAX,CAAmB,MAAnB,EAA2B;AACzBC,cAAAA,QAAQ,EAAEX,WADe;AAEzBY,cAAAA,UAAU,EAAEC;AAFa,aAA3B;AAID;;AAEKC,UAAAA,MAzBW,GAyBF,SAATA,MAAS;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,0BACVd,WAAW,IAAIA,WAAW,CAACe,MAAZ,GAAqB,CAD1B;AAAA;AAAA;AAAA;;AAAA;AAMHC,oBAAAA,aANG,GAMa,IAAItC,iBAAJ,CAAsBN,IAAtB,CANb;AAAA;AAAA,qDAOoB4C,aAAa,CAACC,iBAAd,CAC3BjB,WAD2B,EAE3BV,iBAAiB,CAAC4B,OAFS,CAPpB;;AAAA;AAOHpB,oBAAAA,eAPG;AAWTC,oBAAAA,iBAAiB,CAACD,eAAD,CAAjB;AACAO,oBAAAA,eAAe,CAAC,IAAD,CAAf;AAZS;AAAA;;AAAA;AAAA;AAAA;AAcTc,oBAAAA,KAAK,CAAC,YAAIC,OAAL,CAAL;;AAdS;AAAA;AAAA;;AAAA;AAkBXD,oBAAAA,KAAK,CAAC,gCAAD,CAAL;;AAlBW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAzBE;;AA+CXE,UAAAA,QA/CW,GA+CA,SAAXA,QAAW;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAEPC,oBAAAA,UAFO,GAEM5C,iBAAiB,CAAC4C,UAAlB,CACjBxB,cADiB,EAEjBI,GAFiB,CAFN;AAAA;AAAA,qDAMPvB,oBAAoB,CAACP,IAAD,EAAOkD,UAAP,CANb;;AAAA;AAObjB,oBAAAA,eAAe,CAAC,KAAD,CAAf;AACMQ,oBAAAA,MARO,GAQCzC,IAAI,CAACmD,WAAL,CAAiBC,GARlB;AASPC,oBAAAA,OATO,GASGxC,GAAG,CAACZ,SAAD,EAAY,OAAZ,EAAqB2B,WAArB,CATN;AAAA;AAAA,qDAWUd,cAAc,CAACb,SAAD,EAAY,iBAAOqD,WAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+DAC5BA,WAAW,CAACC,GAAZ,CAAgBF,OAAhB,CAD4B;;AAAA;AACzChB,8BAAAA,IADyC;;AAE/C,kCAAI,CAACA,IAAI,CAACmB,MAAL,EAAL,EAAoB;AAClBvC,gCAAAA,UAAU,CAACwC,QAAX,CAAoB,cAApB,EAAoC;AAClClB,kCAAAA,QAAQ,EAAEX,WADwB;AAElCY,kCAAAA,UAAU,EAAEC;AAFsB,iCAApC;AAID,+BALD,MAKK;AACHxB,gCAAAA,UAAU,CAACqB,OAAX,CAAmB,MAAnB,EAA2B;AACzBC,kCAAAA,QAAQ,EAAEX,WADe;AAEzBY,kCAAAA,UAAU,EAAEC;AAFa,iCAA3B;AAID;;AAZ8C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAAZ,CAXxB;;AAAA;AAWPiB,oBAAAA,QAXO;AAAA;AAAA;;AAAA;AAAA;AAAA;AA0BbzB,oBAAAA,eAAe,CAAC,KAAD,CAAf;AACA0B,oBAAAA,OAAO,CAACC,GAAR,CAAY,aAAIZ,OAAhB;;AA3Ba;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WA/CA;;AAAA,4CAgFf,KAAC,IAAD;AAAM,YAAA,KAAK,EAAEa,MAAM,CAACC,UAApB;AAAA,sBACE,MAAC,IAAD;AAAM,cAAA,KAAK,EAAED,MAAM,CAACE,SAApB;AAAA,yBACE,KAAC,KAAD;AAAO,gBAAA,MAAM,EAAEC,OAAO,0BAAtB;AAAkD,gBAAA,KAAK,EAAE;AAACC,kBAAAA,KAAK,EAAC,GAAP;AAAYC,kBAAAA,MAAM,EAAC,GAAnB;AAAwBC,kBAAAA,SAAS,EAAC,EAAlC;AAAsCC,kBAAAA,YAAY,EAAC;AAAnD;AAAzD,gBADF,EAGE,KAAC,IAAD;AAAM,gBAAA,KAAK,EAAEP,MAAM,CAACQ,SAApB;AAAA;AAAA,gBAHF,EAIE,KAAC,IAAD;AAAM,gBAAA,KAAK,EAAER,MAAM,CAACS,QAApB;AAAA;AAAA,gBAJF,EAKE,KAAC,SAAD;AAAW,gBAAA,KAAK,EAAET,MAAM,CAACU,SAAzB;AAAoC,gBAAA,WAAW,EAAE,cAAjD;AACE,gBAAA,YAAY,EAAE,sBAACC,IAAD;AAAA,yBAAU3C,cAAc,CAAC2C,IAAI,CAAClC,OAAL,CAAa,IAAb,EAAmB,EAAnB,CAAD,CAAxB;AAAA;AADhB,gBALF,EAOE,KAAC,IAAD;AAAM,gBAAA,KAAK,EAAE;AAACmC,kBAAAA,KAAK,EAAC,MAAP;AAAeC,kBAAAA,QAAQ,EAAC;AAAxB,iBAAb;AAAA;AAAA,gBAPF,EAQE,KAAC,SAAD;AAAW,gBAAA,KAAK,EAAEb,MAAM,CAACc,MAAzB;AAAiC,gBAAA,OAAO,EAAI;AAAA,yBAAMjC,MAAM,EAAZ;AAAA,iBAA5C;AAAA,0BACE,KAAC,IAAD;AAAM,kBAAA,KAAK,EAAE;AAAC+B,oBAAAA,KAAK,EAAC1E,MAAM,CAAC6E,SAAd;AAAyBC,oBAAAA,UAAU,EAAC,KAApC;AAA2CH,oBAAAA,QAAQ,EAAC,EAApD;AAAwDI,oBAAAA,OAAO,EAAC;AAAhE,mBAAb;AAAA;AAAA;AADF,gBARF,EAYE,KAAC,8BAAD;AACI,gBAAA,GAAG,EAAE5D,iBADT;AAEI,gBAAA,cAAc,EAAEH,GAAG,CAACQ,OAFxB;AAGI,gBAAA,4BAA4B,MAHhC;AAII,gBAAA,mCAAmC;AAJvC,gBAZF,EAmBE,KAAC,SAAD;AAAW,gBAAA,KAAK,EAAEsC,MAAM,CAACU,SAAzB;AAAoC,gBAAA,WAAW,EAAE,8BAAjD;AACE,gBAAA,YAAY,EAAE,sBAACC,IAAD;AAAA,yBAAUzC,MAAM,CAACyC,IAAD,CAAhB;AAAA;AADhB,gBAnBF,EAqBE,KAAC,SAAD;AAAW,gBAAA,KAAK,EAAEX,MAAM,CAACkB,QAAzB;AAAmC,gBAAA,OAAO,EAAI;AAAA,yBAAM9B,QAAQ,EAAd;AAAA,iBAA9C;AAAA,0BACE,KAAC,IAAD;AAAM,kBAAA,KAAK,EAAE;AAACwB,oBAAAA,KAAK,EAAC1E,MAAM,CAAC6E,SAAd;AAAyBC,oBAAAA,UAAU,EAAC,KAApC;AAA2CH,oBAAAA,QAAQ,EAAC,EAApD;AAAwDI,oBAAAA,OAAO,EAAC;AAAhE,mBAAb;AAAA;AAAA;AADF,gBArBF;AAAA;AADF,YAhFe;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAnB;;AA8GA,IAAMjB,MAAM,GAAGmB,UAAU,CAACC,MAAX,CAAkB;AAC7BnB,EAAAA,UAAU,EAAC;AACPoB,IAAAA,eAAe,EAAEnF,MAAM,CAACoF,OADjB;AAEPC,IAAAA,IAAI,EAAC,CAFE;AAGPC,IAAAA,UAAU,EAAC;AAHJ,GADkB;AAM7BtB,EAAAA,SAAS,EAAC;AACRmB,IAAAA,eAAe,EAAEnF,MAAM,CAAC6E,SADhB;AAERV,IAAAA,MAAM,EAAE,KAFA;AAGRD,IAAAA,KAAK,EAAC,KAHE;AAIRG,IAAAA,YAAY,EAAE,EAJN;AAKRiB,IAAAA,UAAU,EAAC,QALH;AAMRlB,IAAAA,SAAS,EAAC;AANF,GANmB;AAc7BE,EAAAA,SAAS,EAAC;AACRI,IAAAA,KAAK,EAAE1E,MAAM,CAACoF,OADN;AAERT,IAAAA,QAAQ,EAAE,EAFF;AAGRG,IAAAA,UAAU,EAAE,MAHJ;AAIRV,IAAAA,SAAS,EAAE;AAJH,GAdmB;AAoB7BI,EAAAA,SAAS,EAAC;AACRJ,IAAAA,SAAS,EAAE,CADH;AAERmB,IAAAA,YAAY,EAAC,CAFL;AAGRC,IAAAA,WAAW,EAAC,CAHJ;AAIRnB,IAAAA,YAAY,EAAC,EAJL;AAKRoB,IAAAA,WAAW,EAAEzF,MAAM,CAACoF,OALZ;AAMRT,IAAAA,QAAQ,EAAE,EANF;AAORR,IAAAA,MAAM,EAAE,EAPA;AAQRD,IAAAA,KAAK,EAAE,GARC;AASRwB,IAAAA,SAAS,EAAE;AATH,GApBmB;AA+B7BnB,EAAAA,QAAQ,EAAC;AACPG,IAAAA,KAAK,EAAE1E,MAAM,CAACoF,OADP;AAEPT,IAAAA,QAAQ,EAAE,EAFH;AAGPP,IAAAA,SAAS,EAAE,EAHJ;AAIPU,IAAAA,UAAU,EAAC;AAJJ,GA/BoB;AAqC7BF,EAAAA,MAAM,EAAC;AACLO,IAAAA,eAAe,EAAEnF,MAAM,CAACoF,OADnB;AAELf,IAAAA,YAAY,EAAC,EAFR;AAGLD,IAAAA,SAAS,EAAE,EAHN;AAILmB,IAAAA,YAAY,EAAE;AAJT,GArCsB;AA2C7BP,EAAAA,QAAQ,EAAC;AACPG,IAAAA,eAAe,EAAEnF,MAAM,CAACoF,OADjB;AAEPf,IAAAA,YAAY,EAAC,EAFN;AAGPD,IAAAA,SAAS,EAAE;AAHJ;AA3CoB,CAAlB,CAAf;AAkDA,eAAenD,UAAf","sourcesContent":["import {View, KeyboardAvoidingView, Text, Platform, TextInput, Modal, Pressable, StyleSheet, Image, Button} from 'react-native';\nimport React, {useState} from 'react';\nimport Colors from '../utils/Colors.js';\nimport { auth, firestore } from '../firebase.js';\nimport { getApp } from 'firebase/app';\nimport { FirebaseRecaptchaVerifierModal, FirebaseRecaptchaBanner } from 'expo-firebase-recaptcha';\nimport { getAuth, PhoneAuthProvider, signInWithCredential } from 'firebase/auth';\nimport { async } from '@firebase/util';\nimport { collection, query, where, getDocs, doc, runTransaction } from \"firebase/firestore\";\n\nconst app = getApp();\nconst HomeScreen = async ({navigation}) => {\n  const recaptchaVerifier = React.useRef(null);\n  const [confirmationResult, setConfirmationResult] = React.useState();\n  const firebaseConfig = app ? app.options : undefined;\n  const attemptInvisibleVerification = false;\n  const [verificationId, setVerificationId] = React.useState();\n  \n  const [phoneNumber, addPhoneNumber] = React.useState('+1');\n  const [otp, setOTP] = React.useState('')\n  const [modalVisible, setModalVisible] = useState(false);\n  const [logState, setLogState] = React.useState(false);\n\n  await auth.onAuthStateChanged(function(user) {\n    if (user){\n      setLogState(true)\n    }\n  })\n\n  if (logState === true){\n    navigation.replace('Main', {\n      paramKey: phoneNumber,\n      paramToken: token\n    })\n  }\n  \n  const GetOTP = async () => {\n    if(phoneNumber && phoneNumber.length > 9){\n      // The FirebaseRecaptchaVerifierModal ref implements the\n      // FirebaseAuthApplicationVerifier interface and can be\n      // passed directly to `verifyPhoneNumber`.\n      try {\n        const phoneProvider = new PhoneAuthProvider(auth);\n        const verificationId = await phoneProvider.verifyPhoneNumber(\n          phoneNumber,\n          recaptchaVerifier.current\n        );\n        setVerificationId(verificationId);\n        setModalVisible(true);\n      } catch (err) {\n        alert(err.message);\n      }\n    }   \n    else{\n      alert(\"Please enter a 10 digit number\");\n    }\n  }\n\n  const checkOTP = async () => {\n    try {\n      const credential = PhoneAuthProvider.credential(\n        verificationId,\n        otp\n      );\n      await signInWithCredential(auth, credential);\n      setModalVisible(false)\n      const token = auth.currentUser.uid;\n      const userRef = doc(firestore, \"users\", phoneNumber);\n\n      const readUser = await runTransaction(firestore, async (transaction) => {\n        const user = await transaction.get(userRef);\n        if (!user.exists()) {\n          navigation.navigate('Registration', {\n            paramKey: phoneNumber,\n            paramToken: token\n          })\n        }else{\n          navigation.replace('Main', {\n            paramKey: phoneNumber,\n            paramToken: token\n          })\n        }\n      });\n    } catch (err) {\n      setModalVisible(false)\n      console.log(err.message);\n    }\n  }\n\n  \n  return(\n    <View style={styles.homeScreen}>\n      <View style={styles.loginView}>\n        <Image source={require('../assets/img/Logo.png')} style={{width:200, height:200, marginTop:20, borderRadius:40}} />\n\n        <Text style={styles.loginText}>WELCOME👋🏽</Text>\n        <Text style={styles.textInfo}>Enter Your Phone Number:</Text>\n        <TextInput style={styles.textInput} placeholder={'+11234567899'}\n          onChangeText={(text) => addPhoneNumber(text.replace(/ /g, ''))}/>\n        <Text style={{color:'grey', fontSize:15}} >*You will receive a code on your phone number</Text>\n        <Pressable style={styles.btnOTP} onPress = {() => GetOTP()}>\n          <Text style={{color:Colors.Secondary, fontWeight:'700', fontSize:20, padding:10}}>Get OTP</Text>\n        </Pressable>\n\n        <FirebaseRecaptchaVerifierModal\n            ref={recaptchaVerifier}\n            firebaseConfig={app.options}\n            attemptInvisibleVerification\n            androidHardwareAccelerationDisabled\n        />\n\n        <TextInput style={styles.textInput} placeholder={'Enter your One-Time-Password'}\n          onChangeText={(text) => setOTP(text)}/>\n        <Pressable style={styles.btnLogin} onPress = {() => checkOTP()} >\n          <Text style={{color:Colors.Secondary, fontWeight:'700', fontSize:20, padding:10}}>LOGIN</Text>\n        </Pressable>\n      </View>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n    homeScreen:{\n        backgroundColor: Colors.Primary,\n        flex:1,\n        alignItems:'center',\n    },\n    loginView:{\n      backgroundColor: Colors.Secondary,\n      height: '80%',\n      width:'35%',\n      borderRadius: 40,\n      alignItems:'center',\n      marginTop:'3%'\n    },\n    loginText:{\n      color: Colors.Primary,\n      fontSize: 40,\n      fontWeight: 'bold',\n      marginTop: 20,\n    },\n    textInput:{\n      marginTop: 5,\n      marginBottom:5,\n      borderWidth:2,\n      borderRadius:10,\n      borderColor: Colors.Primary,\n      fontSize: 20,\n      height: 40,\n      width: 300,\n      textAlign: 'center',\n    },\n    textInfo:{\n      color: Colors.Primary,\n      fontSize: 20,\n      marginTop: 18,\n      fontWeight:'bold',\n    },\n    btnOTP:{\n      backgroundColor: Colors.Primary,\n      borderRadius:10,\n      marginTop: 10,\n      marginBottom: 5\n    },\n    btnLogin:{\n      backgroundColor: Colors.Primary,\n      borderRadius:10,\n      marginTop: 5\n    },\n});\n\nexport default HomeScreen;\n"]},"metadata":{},"sourceType":"module"}