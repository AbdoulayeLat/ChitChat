{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useCallback, useState, useLayoutEffect } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport { auth, firestore, storage } from \"../../firebase\";\nimport { signOut } from 'firebase/auth';\nimport { collection, addDoc, doc, setDoc, getDoc, query, orderBy, onSnapshot, where } from 'firebase/firestore';\nimport { ref, getDownloadURL } from '@firebase/storage';\nimport { GiftedChat, InputToolbar } from 'react-native-gifted-chat';\nimport Colors from \"../../utils/Colors\";\nimport { useEffect } from 'react';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nvar ChatScreen = function ChatScreen(_ref) {\n  var _auth$currentUser;\n\n  var route = _ref.route,\n      navigation = _ref.navigation;\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      messages = _useState2[0],\n      setMessages = _useState2[1];\n\n  var _useState3 = useState(),\n      _useState4 = _slicedToArray(_useState3, 2),\n      friendName = _useState4[0],\n      setFriendName = _useState4[1];\n\n  var token = auth.currentUser.uid;\n\n  var _React$useState = React.useState(),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      imageURL = _React$useState2[0],\n      setImageURL = _React$useState2[1];\n\n  var phoneNumber = \"+16139810386\";\n  var friendPhoneNumber = route.params.friendPhoneNumber;\n\n  var _React$useState3 = React.useState(),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      friendUID = _React$useState4[0],\n      setFrienUID = _React$useState4[1];\n\n  var storageRef = ref(storage, 'images/ProfilePictures/' + token);\n\n  var signOutNow = function signOutNow() {\n    signOut(auth).then(function () {\n      navigation.replace('Home');\n    }).catch(function (error) {});\n  };\n\n  getDownloadURL(storageRef).then(function (url) {\n    setImageURL(url);\n  }).catch(function (error) {\n    console.log(error);\n  });\n  useLayoutEffect(function () {\n    navigation.setOptions({\n      headerRight: function headerRight() {\n        return _jsx(TouchableOpacity, {\n          style: {\n            marginRight: 10\n          },\n          onPress: signOutNow,\n          children: _jsx(Text, {\n            style: {\n              color: 'white',\n              fontWeight: 'bold',\n              fontSize: 18\n            },\n            children: \"Logout\"\n          })\n        });\n      },\n      title: friendName,\n      headerStyle: {\n        backgroundColor: Colors.Primary\n      }\n    });\n  }, [navigation]);\n  getDoc(doc(firestore, \"users\", friendPhoneNumber)).then(function (docSnap) {\n    if (docSnap.exists()) {\n      setFriendName(docSnap.get(\"firstName\") + \" \" + docSnap.get(\"lastName\"));\n    } else {\n      console.log(\"No such document!\");\n    }\n  });\n  useEffect(function () {\n    var q = query(collection(firestore, 'chats/' + phoneNumber + \"/\" + friendPhoneNumber.toString()), orderBy('createdAt', 'desc'));\n    var unsubscribe = onSnapshot(q, function (snapshot) {\n      return setMessages(snapshot.docs.map(function (doc) {\n        return {\n          _id: doc.data()._id,\n          createdAt: doc.data().createdAt.toDate(),\n          text: doc.data().text,\n          user: doc.data().user\n        };\n      }));\n    });\n    return function () {\n      unsubscribe();\n    };\n  });\n\n  var _onSend = useCallback(function _callee() {\n    var messages,\n        phoneNumber,\n        friendName,\n        friendPhoneNumber,\n        _messages$,\n        _id,\n        createdAt,\n        text,\n        user,\n        _args = arguments;\n\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            messages = _args.length > 0 && _args[0] !== undefined ? _args[0] : [];\n            phoneNumber = _args.length > 1 ? _args[1] : undefined;\n            friendName = _args.length > 2 ? _args[2] : undefined;\n            friendPhoneNumber = _args.length > 3 ? _args[3] : undefined;\n            _messages$ = messages[0], _id = _messages$._id, createdAt = _messages$.createdAt, text = _messages$.text, user = _messages$.user;\n            _context.next = 7;\n            return _regeneratorRuntime.awrap(setDoc(doc(firestore, 'chats/' + phoneNumber), {\n              uid: auth.currentUser.uid,\n              contacts: [{\n                friendName: friendName,\n                friendPhoneNumber: friendPhoneNumber\n              }]\n            }));\n\n          case 7:\n            addDoc(collection(firestore, 'chats/' + phoneNumber + \"/\" + friendPhoneNumber), {\n              _id: _id,\n              createdAt: createdAt,\n              text: text,\n              user: user\n            });\n            addDoc(collection(firestore, 'chats/' + friendPhoneNumber + \"/\" + phoneNumber), {\n              _id: _id,\n              createdAt: createdAt,\n              text: text,\n              user: user\n            });\n\n          case 9:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }, []);\n\n  var customtInputToolbar = function customtInputToolbar(props) {\n    return _jsx(InputToolbar, _objectSpread(_objectSpread({}, props), {}, {\n      containerStyle: {\n        borderRadius: 10,\n        marginHorizontal: 5,\n        justifyContent: 'center'\n      }\n    }));\n  };\n\n  return _jsx(View, {\n    style: styles1.view,\n    children: _jsx(GiftedChat, {\n      messages: messages,\n      showAvatarForEveryMessage: true,\n      onSend: function onSend(messages) {\n        return _onSend(messages, phoneNumber, friendName, friendPhoneNumber);\n      },\n      isLoadingEarlier: true,\n      showUserAvatar: true,\n      placeholder: \"Chat Away...\",\n      renderInputToolbar: function renderInputToolbar(props) {\n        return customtInputToolbar(props);\n      },\n      user: {\n        _id: auth == null ? void 0 : (_auth$currentUser = auth.currentUser) == null ? void 0 : _auth$currentUser.uid,\n        avatar: imageURL\n      }\n    })\n  });\n};\n\nvar styles1 = StyleSheet.create({\n  view: {\n    backgroundColor: Colors.Primary,\n    flex: 1\n  }\n});\nexport default ChatScreen;","map":{"version":3,"sources":["/Users/abdoulayendiaye/Documents/chitchat/screens/Chat/ChatScreen.js"],"names":["React","useCallback","useState","useLayoutEffect","auth","firestore","storage","signOut","collection","addDoc","doc","setDoc","getDoc","query","orderBy","onSnapshot","where","ref","getDownloadURL","GiftedChat","InputToolbar","Colors","useEffect","ChatScreen","route","navigation","messages","setMessages","friendName","setFriendName","token","currentUser","uid","imageURL","setImageURL","phoneNumber","friendPhoneNumber","params","friendUID","setFrienUID","storageRef","signOutNow","then","replace","catch","error","url","console","log","setOptions","headerRight","marginRight","color","fontWeight","fontSize","title","headerStyle","backgroundColor","Primary","docSnap","exists","get","q","toString","unsubscribe","snapshot","docs","map","_id","data","createdAt","toDate","text","user","onSend","contacts","customtInputToolbar","props","borderRadius","marginHorizontal","justifyContent","styles1","view","avatar","StyleSheet","create","flex"],"mappings":"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","sourcesContent":["import React, { useCallback, useState, useLayoutEffect } from 'react';\nimport { View, Text, StyleSheet, TouchableOpacity, Image } from 'react-native';\nimport { auth, firestore, storage } from '../../firebase';\nimport { signOut } from 'firebase/auth';\nimport { collection, addDoc, doc, setDoc, getDoc, query, orderBy, onSnapshot, where } from 'firebase/firestore';\nimport { ref, getDownloadURL } from '@firebase/storage';\nimport { GiftedChat, InputToolbar } from 'react-native-gifted-chat';\nimport Colors from '../../utils/Colors';\nimport { useEffect } from 'react';\n\nconst ChatScreen = ({ route, navigation }) => {\n    const [messages, setMessages] = useState([]);\n    const [friendName, setFriendName] = useState();\n    const token = auth.currentUser.uid;\n    const [imageURL, setImageURL] = React.useState();\n    const phoneNumber = \"+16139810386\";\n    const friendPhoneNumber = route.params.friendPhoneNumber;\n    const [friendUID, setFrienUID] = React.useState();\n    const storageRef = ref(storage, 'images/ProfilePictures/'+token);\n\n    const signOutNow = () => {\n      signOut(auth).then(() => {\n          // Sign-out successful.\n          navigation.replace('Home');\n      }).catch((error) => {\n          // An error happened.\n      });\n    }\n\n    getDownloadURL(storageRef)\n    .then((url) => {\n      setImageURL(url)\n    })\n    .catch((error) => {\n      console.log(error)\n    });\n    \n    useLayoutEffect(() => {\n        navigation.setOptions({\n          headerRight: () => (\n            <TouchableOpacity style={{\n                marginRight: 10\n            }}\n                onPress={signOutNow}\n            >\n                <Text style={{color: 'white', fontWeight:'bold', fontSize:18}}>Logout</Text>\n            </TouchableOpacity>\n          ),\n          title: friendName,\n          headerStyle:{\n            backgroundColor: Colors.Primary,\n          }\n        })\n      }, [navigation]);\n      \n      getDoc(doc(firestore, \"users\", friendPhoneNumber)).then(docSnap => {\n        if (docSnap.exists()) {\n          setFriendName(docSnap.get(\"firstName\")+\" \"+docSnap.get(\"lastName\"))\n        } else {\n          console.log(\"No such document!\");\n        }\n      })\n      useEffect(() => {\n        const q = query(collection(firestore, 'chats/'+phoneNumber+\"/\"+friendPhoneNumber.toString()), orderBy('createdAt', 'desc'));\n        const unsubscribe = onSnapshot(q, (snapshot) => setMessages(\n            snapshot.docs.map(doc => ({\n                _id: doc.data()._id,\n                createdAt: doc.data().createdAt.toDate(),\n                text: doc.data().text,\n                user: doc.data().user,\n            }))\n        ));\n        return () => {\n          unsubscribe();\n        };\n    })\n\n    const onSend = useCallback(async (messages = [], phoneNumber, friendName, friendPhoneNumber) => {\n        const { _id, createdAt, text, user} = messages[0]\n        await setDoc(doc(firestore, 'chats/'+phoneNumber), {\n          uid: auth.currentUser.uid,\n          contacts: [{friendName, friendPhoneNumber}]\n        });\n        addDoc(collection(firestore, 'chats/'+phoneNumber+\"/\"+friendPhoneNumber), { _id, createdAt,  text, user });\n        addDoc(collection(firestore, 'chats/'+friendPhoneNumber+\"/\"+phoneNumber), { _id, createdAt,  text, user });\n    }, []);\n\n  const customtInputToolbar = props => {\n    return (\n      <InputToolbar\n        {...props}\n        containerStyle={{\n          borderRadius: 10,\n          marginHorizontal: 5,\n          justifyContent: 'center',\n        }}\n      />\n    );\n  };\n  \n\n  return (\n    <View style={styles1.view}>\n      <GiftedChat\n          messages={messages}\n          showAvatarForEveryMessage={true}\n          onSend={messages => onSend(messages, phoneNumber, friendName, friendPhoneNumber)}\n          isLoadingEarlier={true}\n          showUserAvatar={true}\n          placeholder={\"Chat Away...\"}\n          renderInputToolbar={props => customtInputToolbar(props)}\n          user={{\n              _id: auth?.currentUser?.uid,\n              avatar: imageURL\n          }}\n      />\n    </View>\n  );\n}\n\nconst styles1 = StyleSheet.create({\n  view:{\n    backgroundColor: Colors.Primary,\n    flex:1\n  }\n});\n\nexport default ChatScreen"]},"metadata":{},"sourceType":"module"}