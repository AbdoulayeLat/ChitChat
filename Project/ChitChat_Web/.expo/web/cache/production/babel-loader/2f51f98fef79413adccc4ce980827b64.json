{"ast":null,"code":"import _defineProperty from\"@babel/runtime/helpers/defineProperty\";import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";import _objectWithoutProperties from\"@babel/runtime/helpers/objectWithoutProperties\";var _excluded=[\"firebaseConfig\",\"firebaseVersion\",\"appVerificationDisabledForTesting\",\"languageCode\",\"onVerify\",\"onLoad\",\"onError\",\"onFullChallenge\",\"invisible\",\"verify\"];function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;})),keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach(function(key){_defineProperty(target,key,source[key]);}):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}return target;}import{DEFAULT_WEB_APP_OPTIONS}from'expo-firebase-core';import{CodedError}from'expo-modules-core';import*as React from'react';import{WebView}from\"./WebView\";function getWebviewSource(firebaseConfig,firebaseVersion){var appVerificationDisabledForTesting=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;var languageCode=arguments.length>3?arguments[3]:undefined;var invisible=arguments.length>4?arguments[4]:undefined;firebaseVersion=firebaseVersion||'8.0.0';return{baseUrl:\"https://\"+firebaseConfig.authDomain,html:\"\\n<!DOCTYPE html><html>\\n<head>\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width,initial-scale=1,maximum-scale=1,user-scalable=no\\\">\\n  <meta http-equiv=\\\"X-UA-Compatible\\\" content=\\\"IE=edge,chrome=1\\\">\\n  <meta name=\\\"HandheldFriendly\\\" content=\\\"true\\\">\\n  <script src=\\\"https://www.gstatic.com/firebasejs/\"+firebaseVersion+\"/firebase-app.js\\\"></script>\\n  <script src=\\\"https://www.gstatic.com/firebasejs/\"+firebaseVersion+\"/firebase-auth.js\\\"></script>\\n  <script type=\\\"text/javascript\\\">firebase.initializeApp(\"+JSON.stringify(firebaseConfig)+\");</script>\\n  <style>\\n    html, body {\\n      height: 100%;\\n      \"+(invisible?\"padding: 0; margin: 0;\":\"\")+\"\\n    }\\n    #recaptcha-btn {\\n      width: 100%;\\n      height: 100%;\\n      padding: 0;\\n      margin: 0;\\n      border: 0;\\n      user-select: none;\\n      -webkit-user-select: none;\\n    }\\n  </style>\\n</head>\\n<body>\\n  \"+(invisible?\"<button id=\\\"recaptcha-btn\\\" type=\\\"button\\\" onclick=\\\"onClickButton()\\\">Confirm reCAPTCHA</button>\":\"<div id=\\\"recaptcha-cont\\\" class=\\\"g-recaptcha\\\"></div>\")+\"\\n  <script>\\n    var fullChallengeTimer;\\n    function onVerify(token) {\\n      if (fullChallengeTimer) {\\n        clearInterval(fullChallengeTimer);\\n        fullChallengeTimer = undefined;\\n      }\\n      window.ReactNativeWebView.postMessage(JSON.stringify({\\n        type: 'verify',\\n        token: token\\n      }));\\n    }\\n    function onLoad() {\\n      window.ReactNativeWebView.postMessage(JSON.stringify({\\n        type: 'load'\\n      }));\\n      firebase.auth().settings.appVerificationDisabledForTesting = \"+appVerificationDisabledForTesting+\";\\n      \"+(languageCode?\"firebase.auth().languageCode = '\"+languageCode+\"';\":'')+\"\\n      window.recaptchaVerifier = new firebase.auth.RecaptchaVerifier(\\\"\"+(invisible?'recaptcha-btn':'recaptcha-cont')+\"\\\", {\\n        size: \\\"\"+(invisible?'invisible':'normal')+\"\\\",\\n        callback: onVerify\\n      });\\n      window.recaptchaVerifier.render();\\n    }\\n    function onError() {\\n      window.ReactNativeWebView.postMessage(JSON.stringify({\\n        type: 'error'\\n      }));\\n    }\\n    function onClickButton() {\\n      if (!fullChallengeTimer) {\\n        fullChallengeTimer = setInterval(function() {\\n          var iframes = document.getElementsByTagName(\\\"iframe\\\");\\n          var isFullChallenge = false;\\n          for (i = 0; i < iframes.length; i++) {\\n            var parentWindow = iframes[i].parentNode ? iframes[i].parentNode.parentNode : undefined;\\n            var isHidden = parentWindow && parentWindow.style.opacity == 0;\\n            isFullChallenge = isFullChallenge || (\\n              !isHidden && \\n              ((iframes[i].title === 'recaptcha challenge') ||\\n               (iframes[i].src.indexOf('google.com/recaptcha/api2/bframe') >= 0)));\\n          }\\n          if (isFullChallenge) {\\n            clearInterval(fullChallengeTimer);\\n            fullChallengeTimer = undefined;\\n            window.ReactNativeWebView.postMessage(JSON.stringify({\\n              type: 'fullChallenge'\\n            }));  \\n          }\\n        }, 100);\\n      }\\n    }\\n    window.addEventListener('message', function(event) {\\n      if (event.data.verify) {\\n        document.getElementById('recaptcha-btn').click();\\n      }\\n    });\\n  </script>\\n  <script src=\\\"https://www.google.com/recaptcha/api.js?onload=onLoad&render=explicit&hl=\"+(languageCode!=null?languageCode:'')+\"\\\" onerror=\\\"onError()\\\"></script>\\n</body></html>\"};}function validateFirebaseConfig(firebaseConfig){if(!firebaseConfig){throw new CodedError('ERR_FIREBASE_RECAPTCHA_CONFIG',\"Missing firebase web configuration. Please set the \\\"expo.web.config.firebase\\\" field in \\\"app.json\\\" or use the \\\"firebaseConfig\\\" prop.\");}var authDomain=firebaseConfig.authDomain;if(!authDomain){throw new CodedError('ERR_FIREBASE_RECAPTCHA_CONFIG',\"Missing \\\"authDomain\\\" in firebase web configuration.\");}}export default function FirebaseRecaptcha(props){var firebaseConfig=props.firebaseConfig,firebaseVersion=props.firebaseVersion,appVerificationDisabledForTesting=props.appVerificationDisabledForTesting,languageCode=props.languageCode,onVerify=props.onVerify,onLoad=props.onLoad,onError=props.onError,onFullChallenge=props.onFullChallenge,invisible=props.invisible,verify=props.verify,otherProps=_objectWithoutProperties(props,_excluded);var webview=React.useRef(null);var _React$useState=React.useState(false),_React$useState2=_slicedToArray(_React$useState,2),loaded=_React$useState2[0],setLoaded=_React$useState2[1];React.useEffect(function(){if(webview.current&&loaded&&verify){webview.current.injectJavaScript(\"\\n    (function(){\\n      window.dispatchEvent(new MessageEvent('message', {data: { verify: true }}));\\n    })();\\n    true;\\n    \");}return function(){};},[webview,verify,loaded]);validateFirebaseConfig(firebaseConfig);if(!firebaseConfig){console.error(\"FirebaseRecaptcha: Missing firebase web configuration. Please set the \\\"expo.web.config.firebase\\\" field in \\\"app.json\\\" or use the \\\"firebaseConfig\\\" prop.\");return null;}return React.createElement(WebView,_objectSpread({ref:webview,javaScriptEnabled:true,automaticallyAdjustContentInsets:true,scalesPageToFit:true,mixedContentMode:\"always\",source:getWebviewSource(firebaseConfig,firebaseVersion,appVerificationDisabledForTesting,languageCode,invisible),onError:onError,onMessage:function onMessage(event){var data=JSON.parse(event.nativeEvent.data);switch(data.type){case'load':if(onLoad){setLoaded(true);onLoad();}break;case'error':if(onError){onError();}break;case'verify':onVerify(data.token);break;case'fullChallenge':if(onFullChallenge){onFullChallenge();}break;}}},otherProps));}FirebaseRecaptcha.defaultProps={firebaseConfig:DEFAULT_WEB_APP_OPTIONS};","map":{"version":3,"sources":["../src/FirebaseRecaptcha.tsx"],"names":[],"mappings":"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","sourcesContent":["import { DEFAULT_WEB_APP_OPTIONS, FirebaseOptions } from 'expo-firebase-core';\nimport { CodedError } from 'expo-modules-core';\nimport * as React from 'react';\n\nimport { WebView } from './WebView';\n\ninterface Props extends React.ComponentProps<typeof WebView> {\n  firebaseConfig?: FirebaseOptions;\n  firebaseVersion?: string;\n  appVerificationDisabledForTesting?: boolean;\n  languageCode?: string;\n  onLoad?: () => any;\n  onError?: () => any;\n  onVerify: (token: string) => any;\n  onFullChallenge?: () => any;\n  invisible?: boolean;\n  verify?: boolean;\n}\n\nfunction getWebviewSource(\n  firebaseConfig: FirebaseOptions,\n  firebaseVersion?: string,\n  appVerificationDisabledForTesting: boolean = false,\n  languageCode?: string,\n  invisible?: boolean\n) {\n  firebaseVersion = firebaseVersion || '8.0.0';\n  return {\n    baseUrl: `https://${firebaseConfig.authDomain}`,\n    html: `\n<!DOCTYPE html><html>\n<head>\n  <meta name=\"viewport\" content=\"width=device-width,initial-scale=1,maximum-scale=1,user-scalable=no\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n  <meta name=\"HandheldFriendly\" content=\"true\">\n  <script src=\"https://www.gstatic.com/firebasejs/${firebaseVersion}/firebase-app.js\"></script>\n  <script src=\"https://www.gstatic.com/firebasejs/${firebaseVersion}/firebase-auth.js\"></script>\n  <script type=\"text/javascript\">firebase.initializeApp(${JSON.stringify(firebaseConfig)});</script>\n  <style>\n    html, body {\n      height: 100%;\n      ${invisible ? `padding: 0; margin: 0;` : ``}\n    }\n    #recaptcha-btn {\n      width: 100%;\n      height: 100%;\n      padding: 0;\n      margin: 0;\n      border: 0;\n      user-select: none;\n      -webkit-user-select: none;\n    }\n  </style>\n</head>\n<body>\n  ${\n    invisible\n      ? `<button id=\"recaptcha-btn\" type=\"button\" onclick=\"onClickButton()\">Confirm reCAPTCHA</button>`\n      : `<div id=\"recaptcha-cont\" class=\"g-recaptcha\"></div>`\n  }\n  <script>\n    var fullChallengeTimer;\n    function onVerify(token) {\n      if (fullChallengeTimer) {\n        clearInterval(fullChallengeTimer);\n        fullChallengeTimer = undefined;\n      }\n      window.ReactNativeWebView.postMessage(JSON.stringify({\n        type: 'verify',\n        token: token\n      }));\n    }\n    function onLoad() {\n      window.ReactNativeWebView.postMessage(JSON.stringify({\n        type: 'load'\n      }));\n      firebase.auth().settings.appVerificationDisabledForTesting = ${appVerificationDisabledForTesting};\n      ${languageCode ? `firebase.auth().languageCode = '${languageCode}';` : ''}\n      window.recaptchaVerifier = new firebase.auth.RecaptchaVerifier(\"${\n        invisible ? 'recaptcha-btn' : 'recaptcha-cont'\n      }\", {\n        size: \"${invisible ? 'invisible' : 'normal'}\",\n        callback: onVerify\n      });\n      window.recaptchaVerifier.render();\n    }\n    function onError() {\n      window.ReactNativeWebView.postMessage(JSON.stringify({\n        type: 'error'\n      }));\n    }\n    function onClickButton() {\n      if (!fullChallengeTimer) {\n        fullChallengeTimer = setInterval(function() {\n          var iframes = document.getElementsByTagName(\"iframe\");\n          var isFullChallenge = false;\n          for (i = 0; i < iframes.length; i++) {\n            var parentWindow = iframes[i].parentNode ? iframes[i].parentNode.parentNode : undefined;\n            var isHidden = parentWindow && parentWindow.style.opacity == 0;\n            isFullChallenge = isFullChallenge || (\n              !isHidden && \n              ((iframes[i].title === 'recaptcha challenge') ||\n               (iframes[i].src.indexOf('google.com/recaptcha/api2/bframe') >= 0)));\n          }\n          if (isFullChallenge) {\n            clearInterval(fullChallengeTimer);\n            fullChallengeTimer = undefined;\n            window.ReactNativeWebView.postMessage(JSON.stringify({\n              type: 'fullChallenge'\n            }));  \n          }\n        }, 100);\n      }\n    }\n    window.addEventListener('message', function(event) {\n      if (event.data.verify) {\n        document.getElementById('recaptcha-btn').click();\n      }\n    });\n  </script>\n  <script src=\"https://www.google.com/recaptcha/api.js?onload=onLoad&render=explicit&hl=${\n    languageCode ?? ''\n  }\" onerror=\"onError()\"></script>\n</body></html>`,\n  };\n}\n\nfunction validateFirebaseConfig(firebaseConfig?: FirebaseOptions) {\n  if (!firebaseConfig) {\n    throw new CodedError(\n      'ERR_FIREBASE_RECAPTCHA_CONFIG',\n      `Missing firebase web configuration. Please set the \"expo.web.config.firebase\" field in \"app.json\" or use the \"firebaseConfig\" prop.`\n    );\n  }\n  const { authDomain } = firebaseConfig;\n  if (!authDomain) {\n    throw new CodedError(\n      'ERR_FIREBASE_RECAPTCHA_CONFIG',\n      `Missing \"authDomain\" in firebase web configuration.`\n    );\n  }\n}\n\nexport default function FirebaseRecaptcha(props: Props) {\n  const {\n    firebaseConfig,\n    firebaseVersion,\n    appVerificationDisabledForTesting,\n    languageCode,\n    onVerify,\n    onLoad,\n    onError,\n    onFullChallenge,\n    invisible,\n    verify,\n    ...otherProps\n  } = props;\n  const webview = React.useRef(null);\n  const [loaded, setLoaded] = React.useState(false);\n  React.useEffect(() => {\n    if (webview.current && loaded && verify) {\n      // @ts-ignore: Object is possibly null\n      webview.current.injectJavaScript(`\n    (function(){\n      window.dispatchEvent(new MessageEvent('message', {data: { verify: true }}));\n    })();\n    true;\n    `);\n    }\n    return () => {};\n  }, [webview, verify, loaded]);\n  validateFirebaseConfig(firebaseConfig);\n  if (!firebaseConfig) {\n    console.error(\n      `FirebaseRecaptcha: Missing firebase web configuration. Please set the \"expo.web.config.firebase\" field in \"app.json\" or use the \"firebaseConfig\" prop.`\n    );\n    return null;\n  }\n  return (\n    <WebView\n      ref={webview}\n      javaScriptEnabled\n      automaticallyAdjustContentInsets\n      scalesPageToFit\n      mixedContentMode=\"always\"\n      source={getWebviewSource(\n        firebaseConfig,\n        firebaseVersion,\n        appVerificationDisabledForTesting,\n        languageCode,\n        invisible\n      )}\n      onError={onError}\n      onMessage={(event) => {\n        const data = JSON.parse(event.nativeEvent.data);\n        switch (data.type) {\n          case 'load':\n            if (onLoad) {\n              setLoaded(true);\n              onLoad();\n            }\n            break;\n          case 'error':\n            if (onError) {\n              onError();\n            }\n            break;\n          case 'verify':\n            onVerify(data.token);\n            break;\n          case 'fullChallenge':\n            if (onFullChallenge) {\n              onFullChallenge();\n            }\n            break;\n        }\n      }}\n      {...otherProps}\n    />\n  );\n}\n\nFirebaseRecaptcha.defaultProps = {\n  firebaseConfig: DEFAULT_WEB_APP_OPTIONS,\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}